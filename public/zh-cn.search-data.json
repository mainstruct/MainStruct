{"/zh-cn/about/":{"data":{"":"Hextra 是一款专为构建现代化静态网站而设计的简洁、快速且灵活的主题。它尤其适合搭建文档类网站，同时也能轻松驾驭博客、作品集等多种站点类型。\n与 Jekyll 类似，Hugo 同样是一款静态网站生成器。其独特之处在于采用单一二进制文件，可在多平台轻松安装运行。Hugo 以极致的速度与稳定性著称，能在毫秒间渲染包含数千页面的网站。\nHextra 秉持极简理念开发。您无需安装 Node.js 等额外依赖，仅需一个 YAML 配置文件搭配 Markdown 内容即可快速开始。这让我们能专注于创作优质内容，而非配置工具链。","致谢#致谢":"Hextra 的诞生离不开以下工具与灵感的启发：\nHugo Tailwind CSS Heroicons Nextra Next.js"},"title":"关于"},"/zh-cn/blog/":{"data":{"":"RSS 订阅"},"title":"博客"},"/zh-cn/blog/hextra-v0.10/":{"data":{"":"Hextra v0.10.0 是一个重大版本更新，包含多项新功能、架构升级和使用体验优化。\n本次更新还包含了来自 10 位 新贡献者 的代码提交，并解决了社区长期期待的功能需求。\n升级指南\rImportant\n破坏性变更：此版本包含多项不兼容改动。升级前请仔细阅读检查清单和 迁移指南。\n升级至 v0.10.0 前，请确保：\n已安装 Hugo v0.146.0+（扩展版） 检查自定义 CSS 的类名变更（参见 CSS 类前缀变更 和 Tailwind CSS v4） 确认构建环境可访问互联网以下载 LaTeX 和/或 Mermaid 资源 准备就绪后，更新 Hugo 模块：\nhugo mod get -u github.com/imfing/hextra@v0.10.0\r新功能\r以下是本版本值得关注的新特性：\n导航栏下拉菜单支持：创建层级导航菜单 增强搜索体验：改进全标题搜索精度 llms.txt 支持：生成 AI 友好的站点大纲 目录滚动高亮：滚动时自动高亮当前章节 同步标签页切换：跨多组标签页同步选择状态 博客列表分页：为博客列表添加分页控件 MathJax 支持：在 KaTeX 外新增数学公式渲染引擎 导航栏下拉菜单支持\r在导航栏中创建下拉菜单，优化导航项组织方式。\nhugo.yamlmenu: main: - identifier: products name: \"产品\" - name: \"产品A\" parent: products url: \"/product-a\" - name: \"产品B\" parent: products url: \"/product-b\"\r增强搜索体验\r全标题搜索：可搜索所有层级标题内容，不限于页面标题 提升结果精度：改进标题处理和链接准确性 修复结果导航：搜索结果现在能正确跳转到对应章节 特别感谢 @ldez 推动搜索功能升级！\nllms.txt 支持\r现支持生成 llms.txt 格式输出，使站点内容更便于 AI 工具和语言模型获取上下文参考。\nhugo.yamloutputs: home: [html, llms]\r这将在站点根目录生成 llms.txt 文件。\n目录滚动高亮\r滚动页面时，目录会自动高亮当前章节，使导航更加直观。\n同步标签页切换\r相同内容的标签页现在支持跨组同步。启用同步后，选择某个标签会更新所有包含相同项目的标签组（且会记住选择状态）。\nhugo.yamlparams: page: tabs: sync: true\r博客列表分页\r为博客列表页面添加基础分页控件。\nhugo.yamlparams: blog: list: pagerSize: 20 # 每页文章数\rMathJax 支持\r除默认的 KaTeX 外，新增 MathJax 数学公式渲染引擎支持，可按需选择。\nhugo.yamlparams: math: engine: \"mathjax\" # 默认为 \"katex\"\r技术改进\r框架与构建系统\rTailwind CSS v4 迁移：完整迁移至 Tailwind CSS v4，提供更好的定制支持 Hugo 模板系统：适配 Hugo 新版模板系统（v0.146.0+）以确保未来兼容性 数学公式服务端渲染：默认使用 Hugo 原生渲染改进数学公式处理 FlexSearch 0.8 升级：搜索引擎升级至 FlexSearch 0.8，提升 CJK（中日韩）内容编码处理能力 增强资源管理：KaTeX 和 Mermaid 资源支持从 CDN 或本地加载 使用体验优化\r动态 favicon 切换：根据色彩偏好自动更新网站图标 反向分页：支持通过页面 front matter 设置 reversePagination Google 索引控制：新增页面参数控制是否允许 Google 索引 宽度处理改进：通过 CSS 变量优化响应式设计控制 样式改进：现代化 Markdown 表格和水平线样式 错误修复与稳定性\rGiscus 主题同步：评论模块现在正确跟随暗黑/明亮模式切换 搜索结果准确性：修复搜索结果链接和标题转义问题 标签页切换：解决非同步模式下的导航问题 幽灵滚动：修复禁用页脚时出现的异常滚动行为 图片可访问性：避免重复渲染 alt 文本 链接渲染：改进复杂站点结构下的基础 URL 处理 迁移指南\rHugo 版本要求：需 Hugo v0.146.0+（扩展版） CSS 类前缀变更：组件 CSS 类现统一使用 hextra- 前缀 资源管理：KaTeX 和 Mermaid 资源改为构建时下载 Tailwind CSS v4：内部 CSS 编译现使用 Tailwind CSS v4.x 并采用 hx: 前缀","css-类前缀变更#CSS 类前缀变更":"影响：自定义 CSS 中引用了 Hextra 组件类的站点\nv0.10.0 为大多数组件 CSS 类引入统一的 hextra- 前缀，以提高可维护性并避免与用户样式冲突。\n需执行操作：如果自定义 CSS 中引用了 Hextra 组件，请更新以下类名：\n区域 旧类名 新类名 搜索（容器） .search-wrapper .hextra-search-wrapper 搜索（输入框） .search-input .hextra-search-input 搜索（结果） .search-results .hextra-search-results 搜索（标题） .search-wrapper .title .hextra-search-wrapper .hextra-search-title 搜索（活动项） .search-wrapper .active .hextra-search-wrapper .hextra-search-active 搜索（无结果） .search-wrapper .no-result .hextra-search-wrapper .hextra-search-no-result 搜索（前缀） .search-wrapper .prefix .hextra-search-wrapper .hextra-search-prefix 搜索（摘要） .search-wrapper .excerpt .hextra-search-wrapper .hextra-search-excerpt 搜索（匹配项） .search-wrapper .match .hextra-search-wrapper .hextra-search-match 导航栏模糊效果 .nav-container-blur .hextra-nav-container-blur 汉堡菜单 .hamburger-menu .hextra-hamburger-menu 主题切换 .theme-toggle .hextra-theme-toggle 语言切换器 .language-switcher .hextra-language-switcher 侧边栏容器 .sidebar-container .hextra-sidebar-container 侧边栏活动项 .sidebar-active-item .hextra-sidebar-active-item 代码文件名 .filename .hextra-code-filename 复制图标 .copy-icon .hextra-copy-icon 成功图标 .success-icon .hextra-success-icon 步骤组件 .steps .hextra-steps","hugo-版本要求#Hugo 版本要求":"影响：使用旧版 Hugo 的站点\nHextra v0.10.0 因采用新模板系统，要求 Hugo v0.146.0 或更高版本（扩展版）。\n需执行操作：升级 Hextra 前先更新 Hugo 至 v0.146.0+","katex-和-mermaid-资源管理#KaTeX 和 Mermaid 资源管理":"影响：使用 KaTeX 或 Mermaid 的站点\nv0.10.0 改为在构建时从 CDN 下载 KaTeX 和 Mermaid 资源。\n变更内容：\n构建过程需要联网下载这些资源 构建后不再需要外部 CDN 调用 需执行操作：\n确保构建环境可访问互联网以下载资源 隔离环境中的站点需预下载资源并配置 Hextra 加载路径","llmstxt-支持#llms.txt 支持":"","mathjax-支持#MathJax 支持":"","tailwind-css-v4#Tailwind CSS v4":"影响：大量自定义 CSS 引用了 hx-* 类名的站点\n虽然 Hextra 内部已处理 Tailwind CSS v4 迁移，但深度定制的站点可能需要额外调整。\n变更内容：\n内部 CSS 编译使用 Tailwind CSS v4.x 工具类前缀改为 hx: 而非 hx-","使用体验优化#使用体验优化":"","升级指南#升级指南":"","博客列表分页#博客列表分页":"","同步标签页切换#同步标签页切换":"","增强搜索体验#增强搜索体验":"","导航栏下拉菜单支持#导航栏下拉菜单支持":"","技术改进#技术改进":"","新功能#新功能":"","框架与构建系统#框架与构建系统":"","目录滚动高亮#目录滚动高亮":"","贡献者#贡献者":"本次发布得益于 10 位新贡献者的代码提交：\n@oosquare - KaTeX 字体、图片渲染钩子、链接处理改进 @Zabriskije - 修复幽灵滚动问题 @miniwater - 自定义页脚居中、图片 alt 文本优化 @MattDodsonEnglish - Google 索引控制、OpenGraph 文档 @KStocky - 反向分页功能 @PrintN - 文档展示增强 @hobobandy - 标题间距优化 @dlwocks31 - 韩语翻译更新 @TwoAnts - 修复 Giscus 主题切换 @ldez - 搜索功能改进与错误修复 同时感谢长期贡献者 @deining 和 @yuri1969 在文档、翻译和技术改进方面的持续支持。\n完整更新日志：https://github.com/imfing/hextra/compare/v0.9.7…v0.10.0","迁移指南#迁移指南":"","错误修复与稳定性#错误修复与稳定性":""},"title":"Hextra v0.10"},"/zh-cn/docs/":{"data":{"":"👋 你好！欢迎来到 Hextra 文档中心！","下一步#下一步":"立即开始探索：\n快速开始学习如何使用 Hextra 创建网站","什么是-hextra#什么是 Hextra？":"Hextra 是一个基于 Tailwind CSS 构建的现代化、高性能且开箱即用的 Hugo 主题。专为打造文档、博客和网站而设计，它提供丰富的内置功能和灵活配置，满足多样化需求。","核心特性#核心特性":"精美设计 - 灵感源自 Nextra，采用 Tailwind CSS 实现现代美学，让您的站点脱颖而出。 响应式布局与暗黑模式 - 完美适配移动设备、平板及桌面端，并支持根据环境光线自动切换的暗黑模式。 极速轻量 - 依托 Hugo 静态网站生成器的单文件二进制架构，无需 JavaScript 或 Node.js 环境即可运行。 全文搜索 - 内置基于 FlexSearch 的离线全文搜索功能，零配置开箱即用。 功能完备 - 支持 Markdown 语法高亮、LaTeX 数学公式、图表和 Shortcodes 等丰富内容元素。自动生成目录导航、面包屑、分页及侧边栏等组件。 多语言与 SEO 友好 - 通过 Hugo 多语言模式轻松构建国际化站点，原生集成 SEO 标签、Open Graph 和 Twitter Cards 支持。","问题或建议#问题或建议？":"❓\rHextra 仍在积极开发中。 如有疑问或反馈，欢迎提交 Issue！"},"title":"文档"},"/zh-cn/docs/advanced/":{"data":{"":"本节涵盖该主题的一些高级内容。\n多语言支持\r自定义配置\r评论系统"},"title":"高级"},"/zh-cn/docs/advanced/comments/":{"data":{"":"Hextra 支持为您的网站添加评论系统。 目前支持 giscus。","giscus#giscus":"giscus 是一个由 GitHub Discussions 驱动的评论系统。它是免费且开源的。\n要启用 giscus，您需要在网站配置文件中添加以下内容：\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003c仓库\u003e repoId: \u003c仓库 ID\u003e category: \u003c分类\u003e categoryId: \u003c分类 ID\u003e\rgiscus 的配置可以从 giscus.app 网站生成。更多详情也可以在那里找到。\n可以在页面的 front matter 中为特定页面启用或禁用评论：\ncontent/docs/about.md--- title: 关于 comments: true ---"},"title":"评论"},"/zh-cn/docs/advanced/customization/":{"data":{"":"Hextra 在 hugo.yaml 配置文件中提供了一些默认的自定义选项来配置主题。 本页描述了可用选项以及如何进一步自定义主题。","jupyter-笔记本#Jupyter 笔记本":"hextra-jupyter-code-cell - Jupyter 代码单元格容器 hextra-jupyter-code-cell-outputs-container - Jupyter 代码单元格输出容器 hextra-jupyter-code-cell-outputs - Jupyter 代码单元格输出 div 元素","pdf#PDF":"hextra-pdf - PDF 容器元素","tailwind-主题变量#Tailwind 主题变量":"从基于 Tailwind CSS v4 的 Hextra v0.10.0 开始，您可以通过在 @layer theme 块中覆盖 CSS 变量来自定义主题。\n这样可以在不修改每个单独类的情况下自定义全局外观。\nassets/css/custom.css@layer theme { :root { --hx-default-mono-font-family: \"JetBrains Mono\", monospace; } }\r详情请参阅 Tailwind 主题变量文档。","主色调#主色调":"可以通过设置 --primary-hue、--primary-saturation 和 --primary-lightness 变量来自定义主题的主色调：\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; --primary-lightness: 50%; }","主题切换#主题切换":"hextra-theme-toggle - 主题切换按钮","代码块#代码块":"hextra-code-block - 代码块容器 hextra-code-filename - 代码块的文件名元素","代码复制按钮#代码复制按钮":"hextra-code-copy-btn-container - 代码复制按钮容器 hextra-code-copy-btn - 代码复制按钮 hextra-copy-icon - 复制图标元素 hextra-success-icon - 成功图标元素","侧边栏#侧边栏":"hextra-sidebar-container - 侧边栏容器 hextra-sidebar-active-item - 侧边栏中的活动项","功能卡片#功能卡片":"hextra-feature-card - 功能卡片链接元素","功能网格#功能网格":"hextra-feature-grid - 功能网格容器","卡片#卡片":"hextra-card - 卡片元素 hextra-card-image - 卡片图片元素 hextra-card-icon - 卡片图标元素 hextra-card-subtitle - 卡片副标题元素","卡片组#卡片组":"hextra-cards - 卡片网格容器","字体家族#字体家族":"可以使用以下方式自定义内容的字体家族：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; }","导航栏#导航栏":"hextra-nav-container - 导航栏容器 hextra-nav-container-blur - 导航栏模糊效果容器 hextra-hamburger-menu - 汉堡菜单按钮","徽章#徽章":"hextra-badge - 徽章元素","搜索#搜索":"hextra-search-wrapper - 搜索包装容器 hextra-search-input - 搜索输入元素 hextra-search-results - 搜索结果列表容器 搜索 UI 中使用的可选嵌套类：\nhextra-search-title - 结果标题元素 hextra-search-active - 活动结果锚点 hextra-search-no-result - 空状态元素 hextra-search-prefix - 分组结果的面包屑/前缀标签 hextra-search-excerpt - 结果片段文本 hextra-search-match - 高亮查询范围","文件夹#文件夹":"hextra-filetree-folder - 文件树文件夹容器","文件树#文件树":"hextra-filetree - 文件树容器","标签页#标签页":"hextra-tabs-panel - 标签页面板容器 hextra-tabs-toggle - 标签页切换按钮","步骤#步骤":"hextra-steps - 步骤容器","目录#目录":"hextra-toc - 目录容器","短代码#短代码":"","组件布局变量#组件布局变量":"Hextra 提供了 CSS 变量来自定义页面、导航栏和页脚的宽度：\nassets/css/custom.css:root { /* 页面宽度 - 也可以通过 hugo.yaml 中的 params.page.width 配置 */ --hextra-max-page-width: 80rem; /* 默认值：80rem（普通），90rem（宽版），100%（全宽） */ /* 导航栏宽度 - 也可以通过 hugo.yaml 中的 params.navbar.width 配置 */ --hextra-max-navbar-width: 90rem; /* 独立的导航栏宽度 */ /* 页脚宽度 - 也可以通过 hugo.yaml 中的 params.footer.width 配置 */ --hextra-max-footer-width: 80rem; /* 独立的页脚宽度 */ }","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建 assets/css/custom.css 文件。Hextra 会自动加载此文件。","自定义布局#自定义布局":"可以通过在站点的 layouts 目录中创建同名文件来覆盖主题的布局。 例如，要覆盖文档的 single.html 布局，可以在站点中创建 layouts/docs/single.html 文件。\n更多信息，请参阅 Hugo 模板文档。","自定义脚本#自定义脚本":"您可以通过添加以下文件在每个页面的 head 末尾添加自定义脚本：\nlayouts/partials/custom/head-end.html","自定义页脚额外部分#自定义页脚额外部分":"您可以通过在站点中创建 layouts/partials/custom/footer.html 文件来添加页脚的额外部分。\nlayouts/partials/custom/footer.html\r添加的部分将出现在页脚的版权部分之前。 您可以使用 HTML 和 Hugo 模板语法 添加自己的内容。\n页脚部分可用的 Hugo 变量有：.switchesVisible 和 .displayCopyright。","行内代码元素#行内代码元素":"与 其他文本 混合的代码文本颜色可以通过以下方式自定义：\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; }","语法高亮#语法高亮":"可用的语法高亮主题列表可在 Chroma 样式库 中找到。可以使用以下命令生成样式表：\nhugo gen chromastyles --style=github\r要覆盖默认的语法高亮主题，可以将生成的样式添加到自定义 CSS 文件中。","语言切换器#语言切换器":"hextra-language-switcher - 语言切换按钮 hextra-language-options - 语言选项容器","进一步主题自定义#进一步主题自定义":"可以通过覆盖暴露的 CSS 类来自定义主题的默认样式。以下是一个自定义页脚元素的示例：\nassets/css/custom.css.hextra-footer { /* 样式将应用于页脚元素 */ } .hextra-footer:is(html[class~=\"dark\"] *) { /* 样式将应用于暗黑模式下的页脚元素 */ }\r以下类可用于自定义主题的各个部分。","进一步自定义#进一步自定义":"没有找到您需要的内容？欢迎 发起讨论 或为主题做出贡献！","通用#通用":"hextra-scrollbar - 滚动条元素 content - 页面内容容器","页脚#页脚":"hextra-footer - 页脚元素 hextra-custom-footer - 自定义页脚部分容器"},"title":"自定义"},"/zh-cn/docs/advanced/multi-language/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式创建多语言网站。","启用多语言功能#启用多语言功能":"要使网站支持多语言，我们需要在站点配置文件中指定支持的语言：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3","延伸阅读#延伸阅读":"Hugo 多语言模式 Hugo 多语言第一部分：内容翻译 Hugo 多语言第二部分：字符串本地化","翻译字符串#翻译字符串":"要翻译其他位置的字符串，需要将翻译添加到对应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite\r主题中使用的字符串列表可以在 i18n/en.yaml 文件中找到。","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2\r并在对应的 i18n 文件中进行翻译：\ni18n/fr.yamldocumentation: Documentation blog: Blog","通过文件名管理翻译#通过文件名管理翻译":"Hugo 支持通过文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，可以创建 content/docs/_index.fr.md 作为法语翻译。\ncontent\rdocs\r_index.md\r_index.fr.md\r_index.ja.md\r注意：Hugo 还支持通过内容目录翻译。"},"title":"多语言支持"},"/zh-cn/docs/getting-started/":{"data":{"":"","下一步#下一步":"探索以下部分以开始添加更多内容：\n组织文件\r配置\rMarkdown","从模板快速启动#从模板快速启动":"imfing/hextra-starter-template\n您可以通过使用上述模板仓库快速开始。\n我们提供了一个GitHub Actions工作流，可以帮助自动构建并将您的站点部署到GitHub Pages，并免费托管。 更多选项，请查看部署站点。\n🌐 演示 ↗","作为新项目启动#作为新项目启动":"有两种主要方式将Hextra主题添加到您的Hugo项目中：\nHugo模块（推荐）：最简单且推荐的方法。Hugo模块允许您直接从在线源拉取主题。主题会自动下载并由Hugo管理。\nGit子模块：或者，将Hextra添加为Git子模块。主题由Git下载并存储在项目的themes文件夹中。","先决条件#先决条件":"在开始之前，您需要安装以下软件：\nHugo（扩展版） Git Go","先决条件-1#先决条件":"在开始之前，您需要安装以下软件：\nHugo（扩展版） Git","创建您的内容页面#创建您的内容页面":"为主页和文档页面创建新内容：\nhugo new content/_index.md hugo new content/docs/_index.md","创建您的内容页面-1#创建您的内容页面":"为主页和文档页面创建新内容：\nhugo new content/_index.md hugo new content/docs/_index.md","初始化一个新的hugo站点#初始化一个新的Hugo站点":"hugo new site my-site --format=yaml","初始化一个新的hugo站点-1#初始化一个新的Hugo站点":"hugo new site my-site --format=yaml","将hextra主题添加为git子模块#将Hextra主题添加为Git子模块":"切换到站点目录并初始化一个新的Git仓库：\ncd my-site git init\r然后，将Hextra主题添加为Git子模块：\ngit submodule add https://github.com/imfing/hextra.git themes/hextra\r配置hugo.yaml以使用Hextra主题，添加以下内容：\ntheme: hextra","将hextra设置为git子模块#将Hextra设置为Git子模块":"","将hextra设置为hugo模块#将Hextra设置为Hugo模块":"","本地预览站点#本地预览站点":"hugo server --buildDrafts --disableFastRender\r恭喜，您的新站点预览可在http://localhost:1313/查看。\n如何更新主题？\r要更新项目中的所有Hugo模块到最新版本，运行以下命令：\nhugo mod get -u\r要将Hextra更新到最新发布版本，运行以下命令：\nhugo mod get -u github.com/imfing/hextra\r更多详情请参阅Hugo模块。","本地预览站点-1#本地预览站点":"hugo server --buildDrafts --disableFastRender\r您的新站点预览可在http://localhost:1313/查看。\n当使用CI/CD部署Hugo网站时，确保在运行hugo命令之前执行以下命令至关重要。\ngit submodule update --init\r如果不运行此命令，主题文件夹将不会被填充Hextra主题文件，导致构建失败。\n如何更新主题？\r要更新仓库中的所有子模块到最新提交，运行以下命令：\ngit submodule update --remote\r要将Hextra更新到最新提交，运行以下命令：\ngit submodule update --remote themes/hextra\r更多详情请参阅Git子模块。","步骤#步骤":"","步骤-1#步骤":"","通过模块配置hextra主题#通过模块配置Hextra主题":"# 初始化Hugo模块 cd my-site hugo mod init github.com/username/my-site # 添加Hextra主题 hugo mod get github.com/imfing/hextra\r配置hugo.yaml以使用Hextra主题，添加以下内容：\nmodule: imports: - path: github.com/imfing/hextra"},"title":"快速开始"},"/zh-cn/docs/guide/":{"data":{"":"通过以下章节了解如何使用 Hextra：\n文件组织\r配置\rMarkdown\r语法高亮\rLaTeX\r图表\r短代码\r部署站点"},"title":"指南"},"/zh-cn/docs/guide/configuration/":{"data":{"":"Hugo 从站点根目录的 hugo.yaml 读取配置。 配置文件可用来调整站点的所有方面。 查看本网站的示例配置文件 exampleSite/hugo.yaml 以全面了解可用设置和最佳实践。","flexsearch-索引#FlexSearch 索引":"默认启用由 FlexSearch 提供的全文搜索。 要自定义搜索索引，在配置文件中设置 params.search.flexsearch.index 参数：\nhugo.yamlparams: # 搜索 search: enable: true type: flexsearch flexsearch: # 索引页面方式: content | summary | heading | title index: content\rflexsearch.index 的选项：\ncontent - 页面的完整内容（默认） summary - 页面摘要，详见 Hugo 内容摘要 heading - 一级和二级标题 title - 仅包含页面标题 要自定义搜索分词方式，在配置文件中设置 params.search.flexsearch.tokenize 参数：\nhugo.yamlparams: search: # ... flexsearch: # full | forward | reverse | strict tokenize: forward\rflexsearch.tokenize 的选项：\nstrict - 索引完整单词 forward - 正向逐步索引单词 reverse - 双向逐步索引单词 full - 索引所有可能的组合 要从 FlexSearch 搜索索引中排除页面，在页面的 front matter 中设置 excludeSearch: true：\ncontent/docs/guide/configuration.md--- title: 配置 excludeSearch: true ---","google-分析#Google 分析":"要启用 Google Analytics，在 hugo.yaml 中设置 services.googleAnalytics.ID 标志：\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID","google-搜索索引#Google 搜索索引":"要阻止 Google 搜索索引页面，在页面的 frontmatter 中设置 noindex 为 true：\ntitle: 配置（存档版本） params: noindex: true\r要排除整个目录，在父级 _index.md 文件中使用 cascade 键。\n[!注意] 要阻止搜索引擎爬虫，可以制作 robots.txt 模板。 但是，robots.txt 指令不一定能阻止页面出现在 Google 搜索结果中。","llmstxt-支持#LLMS.txt 支持":"要为网站启用 llms.txt 输出格式，为大型语言模型和 AI 代理提供结构化文本大纲，在站点的 hugo.yaml 中添加 llms 输出格式：\nhugo.yamloutputs: - home: [html] + home: [html, llms] page: [html] section: [html, rss] 这将在站点根目录生成一个 llms.txt 文件，包含：\n站点标题和描述 所有章节和页面的层次结构列表 页面摘要和发布日期 所有内容的直接链接 llms.txt 文件根据内容结构自动生成，使 AI 工具和语言模型更容易获取上下文和参考。","open-graph#Open Graph":"要在页面中添加 Open Graph 元数据，在 frontmatter 的 params 中添加值。\n由于一个页面可以有多个 image 和 video 标签，将它们的值放在数组中。 其他 Open Graph 属性只能有一个值。 例如，此页面有一个 og:image 标签（配置社交分享时的预览图片）和一个 og:audio 标签。\ncontent/docs/guide/configuration.mdtitle: \"配置\" params: images: - \"/img/config-image.jpg\" audio: \"config-talk.mp3\"","主侧边栏#主侧边栏":"主侧边栏会根据内容目录结构自动生成。 详情参见文件组织页面。\n要从左侧边栏排除单个页面，在页面的 front matter 中设置 sidebar.exclude 参数：\ncontent/docs/guide/configuration.md--- title: 配置 sidebar: exclude: true ---","主题配置#主题配置":"使用 theme 设置来配置默认主题模式和切换按钮，允许访问者在亮色或暗色模式之间切换。\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true\rtheme.default 的选项：\nlight - 始终使用亮色模式 dark - 始终使用暗色模式 system - 与操作系统设置同步（默认） theme.displayToggle 参数允许显示主题切换按钮。 当设置为 true 时，访问者可以切换亮色或暗色模式，覆盖默认设置。","侧边栏#侧边栏":"","其他#其他":"","其他格式#其他格式":"虽然 favicon.ico 通常用于旧版浏览器，现代浏览器支持 SVG 图标，因其可缩放性和小文件大小而更受青睐。 如果需要，可以使用 favicon.io 或 favycon 等工具生成其他格式的图标。","右侧边栏#右侧边栏":"","基本设置#基本设置":"至少需要在 static 文件夹中包含 favicon.svg。这将作为网站的默认图标。\n可以通过在 SVG 文件中使用 CSS 媒体查询来创建自适应图标，响应系统主题偏好，具体方法参考构建自适应网站图标。","导航#导航":"","嵌套菜单#嵌套菜单":"通过定义子菜单项可以创建下拉菜单。点击父菜单项时会显示子菜单。\nhugo.yamlmenu: main: - identifier: sdk name: SDK - identifier: python name: Python ↗ url: https://python.org parent: sdk - identifier: go name: Go url: https://go.dev parent: sdk\r子菜单项需要通过 parent 参数指定父菜单的 identifier 值。","徽标与标题#徽标与标题":"要修改默认徽标，编辑 hugo.yaml 并在 static 目录下添加徽标文件路径。 可选地，可以更改点击徽标时的跳转链接，以及设置徽标的像素宽度和高度。\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20","暗色模式支持#暗色模式支持":"为了增强暗色模式支持，在 static 文件夹中添加 favicon-dark.svg 与 favicon.svg 一起。当两个文件都存在时，Hextra 会自动：\n在亮色模式或未检测到主题偏好时使用 favicon.svg 当用户系统设置为暗色模式时切换到 favicon-dark.svg 尊重系统的 prefers-color-scheme 设置实现自动切换 暗色模式图标切换在所有现代浏览器中都有效，包括 Firefox，提供与网站主题一致的无缝体验。","标签#标签":"要显示页面标签，在配置文件中设置以下标志：\nhugo.yamlparams: blog: list: displayTags: true toc: displayTags: true","版权信息#版权信息":"要修改网站页脚显示的版权文本，需要创建一个名为 i18n/en.yaml 的文件。 在该文件中指定新的版权文本，如下所示：\ni18n/en.yamlcopyright: \"© 2024 你的文本内容\"\r可以参考 GitHub 仓库中的示例 i18n/en.yaml 文件。此外，可以在版权文本中使用 Markdown 格式。","目录#目录":"目录会根据内容文件中的标题自动生成。可以通过在页面的 front matter 中设置 toc: false 来禁用。\ncontent/docs/guide/configuration.md--- title: 配置 toc: false ---","网站图标#网站图标":"要自定义网站的 favicon，将图标文件放在 static 文件夹下以覆盖主题默认的网站图标：\nstatic\randroid-chrome-192x192.png\randroid-chrome-512x512.png\rapple-touch-icon.png\rfavicon-16x16.png\rfavicon-32x32.png\rfavicon-dark.svg\rfavicon.ico\rfavicon.svg\rsite.webmanifest","菜单#菜单":"右上角菜单在配置文件的 menu.main 部分定义：\nhugo.yamlmenu: main: - name: 文档 pageRef: /docs weight: 1 - name: 博客 pageRef: /blog weight: 2 - name: 关于 pageRef: /about weight: 3 - name: 搜索 weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github\r菜单项有以下几种类型：\n通过 pageRef 链接到站内页面 - name: 文档 pageRef: /docs\r通过 url 链接到外部网址 - name: GitHub url: \"https://github.com\"\r搜索栏，使用 type: search - name: 搜索 params: type: search\r图标 - name: GitHub params: icon: github\r主题切换 - name: Theme Toggle params: type: theme-toggle\r通过设置 weight 参数可以调整菜单项的排序。","页脚#页脚":"","页面宽度#页面宽度":"页面宽度可以通过配置文件中的 params.page.width 参数自定义：\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide\r有三个可用选项：full、wide 和 normal。默认页面宽度为 normal。\n类似地，导航栏和页脚的宽度可以通过 params.navbar.width 和 params.footer.width 参数自定义。","页面最后修改时间#页面最后修改时间":"可以通过启用 params.displayUpdatedDate 标志来显示页面的最后修改日期。要使用 Git 提交日期作为来源，还需启用 enableGitInfo 标志。\n要自定义日期格式，设置 params.dateFormat 参数。其布局与 Hugo 的 time.Format 匹配。\nhugo.yaml# 解析 Git 提交 enableGitInfo: true params: # 显示最后修改日期 displayUpdatedDate: true dateFormat: \"2006年1月2日\"","页面编辑链接#页面编辑链接":"要配置页面编辑链接，可以在配置文件中设置 params.editURL.base 参数：\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\"\r编辑链接将基于提供的 URL 作为根目录自动为每个页面生成。 如果想为特定页面设置编辑链接，可以在页面的 front matter 中设置 editURL 参数：\ncontent/docs/guide/configuration.md--- title: 配置 editURL: \"https://example.com/edit/this/page\" ---","额外链接#额外链接":"侧边栏额外链接在配置文件的 menu.sidebar 部分定义：\nhugo.yamlmenu: sidebar: - name: 更多 params: type: separator weight: 1 - name: \"关于\" pageRef: \"/about\" weight: 2 - name: \"Hugo 文档 ↗\" url: \"https://gohugo.io/documentation/\" weight: 3"},"title":"配置"},"/zh-cn/docs/guide/deploy-site/":{"data":{"":"Hugo 生成静态网站，支持灵活的托管方案。 本页提供在各类平台上部署 Hextra 站点的指南。","cloudflare-pages#Cloudflare Pages":"将站点源码存入 Git 仓库（如 GitHub） 登录 Cloudflare 控制台 并选择账户 在账户首页选择 Workers \u0026 Pages \u003e 创建应用 \u003e Pages \u003e 连接 Git 选择仓库后，在 设置构建与部署 部分填写： 配置项 值 生产分支 main 构建命令 hugo --gc --minify 构建输出目录 public 更多细节请参阅：\n部署 Hugo 站点 语言支持与工具","github-pages#GitHub Pages":"GitHub Pages 是推荐的免费部署托管方案。\n若使用 hextra-starter-template 初始化项目，已内置 GitHub Actions 工作流，可自动部署至 GitHub Pages。\nGitHub Actions 配置\r以下是 hextra-starter-template 的示例配置：\n.github/workflows/pages.yaml# 构建并部署 Hugo 站点到 GitHub Pages 的示例工作流 name: 部署 Hugo 站点到 Pages on: # 针对默认分支的推送触发 push: branches: [\"main\"] # 允许从 Actions 标签手动运行 workflow_dispatch: # 设置 GITHUB_TOKEN 权限以允许部署到 GitHub Pages permissions: contents: read pages: write id-token: write # 仅允许一个并发部署，跳过正在运行与最新排队之间的运行 # 但不会取消进行中的运行，以确保生产部署完成 concurrency: group: \"pages\" cancel-in-progress: false # 默认使用 bash defaults: run: shell: bash jobs: # 构建任务 build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.147.7 steps: - name: 检出代码 uses: actions/checkout@v4 with: fetch-depth: 0 # 获取完整历史记录以支持 .GitInfo 和 .Lastmod submodules: recursive - name: 设置 Go 环境 uses: actions/setup-go@v5 with: go-version: '1.22' - name: 配置 Pages id: pages uses: actions/configure-pages@v4 - name: 安装 Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: 使用 Hugo 构建 env: # 为 Hugo 模块提供最大兼容性 HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: 上传产物 uses: actions/upload-pages-artifact@v3 with: path: ./public # 部署任务 deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: 部署到 GitHub Pages id: deployment uses: actions/deploy-pages@v4\r在仓库设置中，将 Pages \u003e 构建与部署 \u003e 源 设为 GitHub Actions： 默认配置中，GitHub Actions 工作流 .github/workflows/pages.yaml 假设站点部署在 https://\u003c用户名\u003e.github.io/\u003c仓库名\u003e/。\n若需部署到 https://\u003c用户名\u003e.github.io/，请修改 --baseURL：\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" 若使用自定义域名，请相应调整 --baseURL 值。","netlify#Netlify":"将代码推送到 Git 仓库（GitHub/GitLab 等） 在 Netlify 中导入项目 若未使用 [hextra-starter-template][hextra-starter-template]，需手动配置： 构建命令设为 hugo --gc --minify 发布目录设为 public 添加环境变量 HUGO_VERSION 并设为 0.147.7，或在 netlify.toml 中配置 开始部署！ 详见 Netlify 上的 Hugo","vercel#Vercel":"将代码推送到 Git 仓库（GitHub/GitLab 等） 进入 Vercel 控制台 导入 Hugo 项目 配置项目时选择 Hugo 作为框架预设 覆盖构建命令与安装命令： 构建命令设为 hugo --gc --minify 安装命令设为 yum install golang"},"title":"部署站点"},"/zh-cn/docs/guide/diagrams/":{"data":{"":"目前，Hextra 支持通过 Mermaid 绘制图表。","mermaid#Mermaid":"Mermaid 是一个基于 JavaScript 的图表绘制工具，它能将类 Markdown 的文本定义动态转换为浏览器中渲染的图表。例如，Mermaid 可以绘制流程图、时序图、饼图等多种图表。\n在 Hextra 中使用 Mermaid 非常简单，只需编写一个语言设置为 mermaid 的代码块：\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ```\r上述代码将渲染为：\ngraph TD;\rA--\u003eB;\rA--\u003eC;\rB--\u003eD;\rC--\u003eD;\r时序图示例：\nsequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-\u003e\u003eJohn: 你好 John，最近怎么样？\rloop 健康检查\rJohn-\u003e\u003eJohn: 与疑病症斗争\rend\rNote right of John: 理性思考 占据上风！\rJohn--\u003e\u003eAlice: 好极了！\rJohn-\u003e\u003eBob: 你怎么样？\rBob--\u003e\u003eJohn: 非常好！\r更多信息请参阅 Mermaid 官方文档。"},"title":"图表"},"/zh-cn/docs/guide/latex/":{"data":{"":"LaTeX 数学表达式默认使用 (\\KaTeX) 渲染。直接在 Markdown 内容中使用即可，无需手动配置。","katex#KaTeX":"默认设置无需配置。Hugo 会从 CDN 获取 KaTeX CSS。如需指定 KaTeX 版本或使用本地资源，可在 hugo.yaml 中配置。","mathjax#MathJax":"也可使用 MathJax 渲染数学表达式：\nhugo.yamlparams: math: engine: mathjax\rNote\n可通过在项目中覆盖 layouts/_partials/scripts/mathjax.html 模板进一步定制 MathJax（如调整加载器选项或更改 CDN/源）。Hugo 将优先使用你的版本而非主题默认配置。","使用方法#使用方法":"LaTeX 既可用于行内表达式，也可用于大段文本。","使用本地资源#使用本地资源":"可将 CSS 文件置于 assets 目录，并发布 KaTeX 所需的字体文件。\nhugo.yamlparams: math: engine: katex katex: css: \"css/katex.min.css\" assets: - \"fonts/KaTeX_Main-Regular.woff2\" # 在此添加其他字体文件\r此时将从 assets/css/katex.min.css 加载 KaTeX CSS 文件，而非从 CDN 下载。","化学表达式#化学表达式":"默认启用了 mhchem 扩展，可轻松渲染化学方程式和分子式。\n行内示例：(\\ce{H2O}) 是水。\n独立段落：\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$\r将渲染为：\n$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","数学引擎#数学引擎":"构建过程中默认使用 KaTeX 渲染 LaTeX 数学表达式，由 Hugo 支持。\n默认引擎是 KaTeX，但也可切换至 MathJax 以使用其特有功能。","独立公式#独立公式":"对于需要单独成段的表达式，使用 $$ 包裹。\npage.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t)\\, e^{-j \\omega t} \\, dt$$\r将渲染为：\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t), e^{-j \\omega t} , dt$$\n还可以使用 LaTeX 环境如 aligned 处理多行公式。\npage.md$$ \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} $$\r将渲染为：\n$$ \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} $$\n支持的函数列表见 KaTeX 支持函数。","行内公式#行内公式":"要在文本行内插入表达式，用 \\( 和 \\) 包裹。\npage.md这个 \\(\\sigma(z) = \\frac{1}{1 + e^{-z}}\\) 是行内表达式。\r这个 ( \\sigma(z) = \\frac{1}{1 + e^{-z}} ) 是行内表达式。","覆盖-cdn-基础-url#覆盖 CDN 基础 URL":"hugo.yamlparams: math: engine: katex katex: base: \"https://cdn.jsdelivr.net/npm/katex@0.16.22/dist\"","配置#配置":"Important\n请在 Hugo 配置文件中启用并配置 passthrough 扩展，以便 Hugo 能识别 Markdown 中的 LaTeX 数学表达式。\nhugo.yamlmarkup: goldmark: extensions: passthrough: delimiters: block: [['\\[', '\\]'], [\"$$\", \"$$\"]] inline: [['\\(', '\\)']] enable: true"},"title":"数学公式"},"/zh-cn/docs/guide/markdown/":{"data":{"":"Hugo 支持使用 Markdown 语法来格式化文本、创建列表等。本页将展示一些最常用的 Markdown 语法示例。","markdown-示例#Markdown 示例":"","代码块#代码块":"语法高亮","列表#列表":"","图片#图片":"Markdown![风景](https://picsum.photos/800/600)\r带标题：\nLorem Picsum\rMarkdown![风景](https://picsum.photos/800/600 \"Lorem Picsum\")\r如需更高级的功能，请使用 Hugo 内置的 Figure 短代码。","学习资源#学习资源":"Markdown 指南 Markdown 速查表 Markdown 教程 Markdown 参考 上述引用摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 上的演讲。 ↩︎","嵌套列表#嵌套列表":"水果 苹果 橙子 香蕉 乳制品 牛奶 奶酪 Markdown- 水果 - 苹果 - 橙子 - 香蕉 - 乳制品 - 牛奶 - 奶酪","引用块#引用块":"带出处的引用\n不要通过共享内存来通信，而要通过通信来共享内存。\n— Rob Pike1\nMarkdown\u003e 不要通过共享内存来通信，而要通过通信来共享内存。\n\u003e — Rob Pike[^1] [^1]: 上述引用摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 上的[演讲](https://www.youtube.com/watch?v=PAAkCSZUG1c)。","提示框#提示框":"NEW 提示框是基于引用块语法的 Markdown 扩展，可用于强调关键信息。 支持 GitHub 风格的提示框。 请确保您使用的是最新版本的 Hextra 和 Hugo v0.146.0 或更高版本。\nNote\n即使用户只是浏览内容，也应该知道的有用信息。\nTip\n帮助用户更高效或更轻松完成任务的建议。\nImportant\n用户需要了解的关键信息，以实现他们的目标。\nWarning\n需要用户立即关注的紧急信息，以避免出现问题。\nCaution\n关于某些操作可能带来风险或负面结果的警告。\nMarkdown\u003e [!NOTE] \u003e 即使用户只是浏览内容，也应该知道的有用信息。 \u003e [!TIP] \u003e 帮助用户更高效或更轻松完成任务的建议。 \u003e [!IMPORTANT] \u003e 用户需要了解的关键信息，以实现他们的目标。 \u003e [!WARNING] \u003e 需要用户立即关注的紧急信息，以避免出现问题。 \u003e [!CAUTION] \u003e 关于某些操作可能带来风险或负面结果的警告。","文本样式#文本样式":"样式 语法 示例 输出 粗体 **粗体文本** **粗体文本** 粗体文本 斜体 *斜体文本* *斜体文本* 斜体文本 删除线 ~~删除线文本~~ ~~删除线文本~~ 删除线文本 下标 这是下标文本 这是下标文本 上标 这是上标文本 这是上标文本","无序列表#无序列表":"列表项 另一个项 再一个项 Markdown- 列表项 - 另一个项 - 再一个项","有序列表#有序列表":"第一项 第二项 第三项 Markdown1. 第一项 2. 第二项 3. 第三项","表格#表格":"表格不是 Markdown 核心规范的一部分，但 Hugo 原生支持它们。\n姓名 年龄 张三 27 李四 23 Markdown| 姓名 | 年龄 | | :--- | :--- | | 张三 | 27 | | 李四 | 23 |","表格内的行内-markdown#表格内的行内 Markdown":"斜体 粗体 代码 斜体 粗体 代码 Markdown| 斜体 | 粗体 | 代码 | | :----- | :------- | :----- | | _斜体_ | **粗体** | `代码` |","配置#配置":"Hugo 使用 Goldmark 进行 Markdown 解析。 Markdown 渲染可以在 hugo.yaml 中的 markup.goldmark 下配置。 以下是 Hextra 的默认配置：\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false\r更多配置选项，请参阅 Hugo 文档中的 配置 Markup。"},"title":"Markdown"},"/zh-cn/docs/guide/organize-files/":{"data":{"":"","侧边栏导航#侧边栏导航":"侧边栏导航会根据内容组织按字母顺序自动生成。要手动配置侧边栏顺序，可以在 Markdown 文件的 front matter 中使用 weight 参数。\ncontent/docs/guide/_index.md--- title: 指南 weight: 2 ---\rℹ️\r建议不要让侧边栏过深。如果有大量内容，可以考虑将其拆分为多个部分。","布局#布局":"Hextra 为不同类型的内容提供了三种布局：\n布局 目录 特点 docs content/docs/ 适合结构化文档，与本部分相同。 blog content/blog/ 用于博客文章，包含列表和详细文章视图。 default 其他所有目录 单页文章视图，无侧边栏。 要自定义一个部分以模仿内置布局的行为，可以在该部分的 _index.md 的 front matter 中指定所需的类型。\ncontent/my-docs/_index.md--- title: 我的文档 cascade: type: docs ---\r上述示例配置确保 content/my-docs/ 内的内容文件默认会被视为文档（docs 类型）。","添加图片#添加图片":"添加图片最简单的方法是将图片文件放在与 Markdown 文件相同的目录中。 例如，将图片文件 image.png 与 my-page.md 文件放在一起：\ncontent\rdocs\rmy-page.md\rimage.png\r然后，可以使用以下 Markdown 语法将图片添加到内容中：\ncontent/docs/my-page.md![](image.png)\r我们还可以利用 Hugo 的页面包功能将图片文件与 Markdown 文件组织在一起。为此，将 my-page.md 文件转换为目录 my-page，并将内容放入名为 index.md 的文件中，然后将图片文件放入 my-page 目录中：\ncontent\rdocs\rmy-page\rindex.md\rimage.png\rcontent/docs/my-page/index.md![](image.png)\r或者，我们也可以将图片文件放在 static 目录中，这样所有页面都可以访问这些图片：\nstatic\rimages\rimage.png\rcontent\rdocs\rmy-page.md\r注意，图片路径以斜杠 / 开头，并且相对于 static 目录：\ncontent/docs/my-page.md![](/images/image.png)","目录结构#目录结构":"默认情况下，Hugo 会在 content 目录中查找 Markdown 文件，目录的结构决定了网站最终的输出结构。 以本网站为例：\ncontent\r_index.md\rdocs\r_index.md\rgetting-started.md\rguide\r_index.md\rorganize-files.md\rblog\r_index.md\rpost-1.md\r每个 _index.md 文件都是对应部分的索引页。其他 Markdown 文件则是常规页面。\ncontent\r├── _index.md // \u003c- /\r├── docs\r│ ├── _index.md // \u003c- /docs/\r│ ├── getting-started.md // \u003c- /docs/getting-started/\r│ └── guide\r│ ├── _index.md // \u003c- /docs/guide/\r│ └── organize-files.md // \u003c- /docs/guide/organize-files/\r└── blog\r├── _index.md // \u003c- /blog/\r└── post-1.md // \u003c- /blog/post-1/","示例#示例":"给定以下目录结构：\ncontent\r_index.md\rblog\r_index.md\rmy-blog-series\r_index.md\rpost-a\rindex.md\rpost-b\rindex.md\rpost-c\rindex.md\r并在文章的 front matter 中设置：\ncontent/blog/my-blog-series/post-a/index.md--- title: 文章 A weight: 1 ---\rcontent/blog/my-blog-series/post-b/index.md--- title: 文章 B weight: 2 ---\rcontent/blog/my-blog-series/post-c/index.md--- title: 文章 C weight: 3 ---\r如果读者位于 post-b/index.md 的底部，他们会看到下一页是 post-a，上一页是 post-c。这是由于 reversePagination 默认设置为 true。当我们希望文章按从最新到最旧的顺序显示时，这是可以的。然而，对于多部分的博客系列，我们通常希望读者先阅读第一部分，然后依次阅读后续部分。因此，我们希望禁用反向排序。\n我们可以通过在 my-blog-series/_index.md 中添加以下 front matter 来关闭该系列中所有博客文章的 reversePagination：\ncontent/blog/my-blog-series/_index.md--- title: 我的博客系列 cascade: params: reversePagination: false ---\r这里我们使用 cascade 将设置传播到 my-blog-series 中的所有文章，以便所有后代都将 reversePagination 设置为 false。这将确保当读者在 post-b/index.md 时，他们会看到下一页是 post-c，上一页是 post-a。","自定义面包屑链接标题#自定义面包屑链接标题":"默认情况下，每个面包屑链接是根据该页面的 title 参数生成的。可以通过指定 linkTitle 来自定义。\n例如，如果我们希望面包屑显示为 Foo Bar 而不是 Organize Files：\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: 组织文件 ---\r现在会生成以下面包屑：\n文档 \u003e 指南 \u003e Foo Bar","部分分页顺序#部分分页顺序":"通过 PAGE.PrevInSection 和 PAGE.NextInSection 访问的页面在页面集合中的顺序默认是反向的。\n要禁用这种反向排序，可以在页面的 front matter 中将 reversePagination 自定义参数设置为 false。默认情况下，reversePagination 设置为 true。","部分导航#部分导航":"","配置内容目录#配置内容目录":"默认情况下，Hugo 使用根目录 content/ 来构建网站。 如果需要使用其他目录作为内容目录，例如 docs/，可以在站点配置 hugo.yaml 中设置 contentDir 参数。","隐藏面包屑#隐藏面包屑":"可以通过在页面的 front matter 中指定 breadcrumbs: false 来完全隐藏面包屑：\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: 组织文件 ---","面包屑导航#面包屑导航":"面包屑会根据 /content 的目录结构自动生成。\n例如，考虑上面展示的文件结构。给定该结构，位于 /docs/guide/organize-files/ 的页面顶部的面包屑会自动显示如下：\n文档 \u003e 指南 \u003e 组织文件"},"title":"文件组织"},"/zh-cn/docs/guide/shortcodes/":{"data":{"":"Hugo 短代码是内容文件中调用内置或自定义模板的简单片段。\nHextra 提供了一系列精美的短代码来增强您的内容。\n提示框\r卡片\r详情\r文件树\r图标\r步骤\r标签页\rHugo 和 Hextra 提供的其他短代码：\nJupyter 笔记本\ralpha\r其他"},"title":"短代码"},"/zh-cn/docs/guide/shortcodes/callout/":{"data":{"":"一个内置组件，用于向读者展示重要信息。\nNote\n自 v0.9.0 起支持 GitHub风格提示框。 它利用Markdown语法渲染提示框，确保内容具有更好的可移植性和可读性。","使用方法#使用方法":"","信息提示#信息提示":"ℹ️\r请访问GitHub查看最新发布版本。\r{{\u003c callout type=\"info\" \u003e}} 请访问GitHub查看最新发布版本。 {{\u003c /callout \u003e}}","示例#示例":"👾\r提示框是一段旨在吸引注意力的简短文本。\rℹ️\r提示框是一段旨在吸引注意力的简短文本。\r⚠️\r提示框是一段旨在吸引注意力的简短文本。\r🚫\r提示框是一段旨在吸引注意力的简短文本。","警告提示#警告提示":"⚠️\r此API将在下一版本中弃用。\r{{\u003c callout type=\"warning\" \u003e}} 此API将在下一版本中弃用。 {{\u003c /callout \u003e}}","错误提示#错误提示":"🚫\r出现错误，系统即将崩溃。\r{{\u003c callout type=\"error\" \u003e}} 出现错误，系统即将崩溃。 {{\u003c /callout \u003e}}","默认样式#默认样式":"🌐\rHugo可用于创建各种类型的网站，包括博客、作品集、文档站点等。\r{{\u003c callout emoji=\"🌐\" \u003e}} Hugo可用于创建各种类型的网站，包括博客、作品集、文档站点等。 {{\u003c /callout \u003e}}"},"title":"提示框"},"/zh-cn/docs/guide/shortcodes/cards/":{"data":{"":"","使用方法#使用方法":"{{\u003c cards \u003e}}\r{{\u003c card link=\"../callout\" title=\"提示框\" icon=\"warning\" \u003e}}\r{{\u003c card link=\"../callout\" title=\"带标签的卡片\" icon=\"tag\" tag= \"自定义标签\" \u003e}}\r{{\u003c card link=\"/\" title=\"无图标\" \u003e}}\r{{\u003c /cards \u003e}}\r{{\u003c cards \u003e}}\r{{\u003c card link=\"/\" title=\"图片卡片\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash风景图\" \u003e}}\r{{\u003c card link=\"/\" title=\"本地图片\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"静态目录下的原始图片。\" \u003e}}\r{{\u003c card link=\"/\" title=\"本地图片\" image=\"images/space.jpg\" subtitle=\"资源目录下的图片，经过Hugo处理。\" method=\"Resize\" options=\"600x q80 webp\" \u003e}}\r{{\u003c /cards \u003e}}","列数#列数":"可以通过向cards短代码传递cols参数来指定卡片的最大列数。请注意，在小屏幕上列数仍会折叠。\n顶部卡片\r底部卡片\r左侧卡片\r右侧卡片\r{{\u003c cards cols=\"1\" \u003e}}\r{{\u003c card link=\"/\" title=\"顶部卡片\" \u003e}}\r{{\u003c card link=\"/\" title=\"底部卡片\" \u003e}}\r{{\u003c /cards \u003e}}\r{{\u003c cards cols=\"2\" \u003e}}\r{{\u003c card link=\"/\" title=\"左侧卡片\" \u003e}}\r{{\u003c card link=\"/\" title=\"右侧卡片\" \u003e}}\r{{\u003c /cards \u003e}}","卡片参数#卡片参数":"参数 描述 link 链接地址（内部或外部）。 title 卡片的标题。 subtitle 卡片的副标题（支持Markdown）。 icon 图标名称。 tag 标签文本。 tagColor 标签颜色：gray（默认）、yellow、red 和 blue。","图片卡片#图片卡片":"此外，卡片还支持通过以下参数添加图片并进行处理：\n参数 描述 image 指定卡片的图片URL。 method 设置Hugo的图片处理方法。 options 配置Hugo的图片处理选项。 卡片支持三种类型的图片：\n远程图片：在image参数中填写完整的URL。 静态图片：使用Hugo的static/目录下的相对路径。 处理后的图片：使用Hugo的assets/目录下的相对路径。 Hextra在构建时会自动检测是否需要图片处理，并应用options参数或默认设置（Resize，800x，质量80，WebP格式）。 目前支持的method有：Resize、Fit、Fill和Crop。\n有关Hugo内置图片处理命令、方法和选项的更多信息，请参阅其图片处理文档。","标签#标签":"卡片支持添加标签，可用于显示额外的状态信息。\n带默认标签的卡片\r标签文本\r带错误标签的卡片\r标签文本\r带信息标签的卡片\r标签文本\r带警告标签的卡片\r标签文本\r图片卡片网络图片\r标签文本\r{{\u003c cards \u003e}}\r{{\u003c card link=\"../callout\" title=\"带默认标签颜色的卡片\" tag=\"标签文本\" \u003e}}\r{{\u003c card link=\"../callout\" title=\"带红色标签的卡片\" tag=\"标签文本\" tagType=\"error\" \u003e}}\r{{\u003c card link=\"../callout\" title=\"带蓝色标签的卡片\" tag=\"标签文本\" tagType=\"info\" \u003e}}\r{{\u003c card link=\"../callout\" title=\"带黄色标签的卡片\" tag=\"标签文本\" tagType=\"warning\" \u003e}}\r{{\u003c /cards \u003e}}","示例#示例":"提示框\r带标签的卡片\r自定义标签\r无图标\r图片卡片网络图片\r本地图片静态目录下的原始图片。\r本地图片资源目录下的图片，经过Hugo处理。"},"title":"卡片"},"/zh-cn/docs/guide/shortcodes/details/":{"data":{"":"一个内置组件，用于显示可折叠的内容。","使用方法#使用方法":"{{% details title=\"详情\" %}} 这是详情的内容。 支持 **Markdown** 格式。 {{% /details %}}\r{{% details title=\"点击我展开\" closed=\"true\" %}} 默认情况下，这部分内容会被隐藏。 {{% /details %}}","示例#示例":"详情\r这是详情的内容。\n支持 Markdown 格式。\n点击我展开\r默认情况下，这部分内容会被隐藏。"},"title":"详情"},"/zh-cn/docs/guide/shortcodes/filetree/":{"data":{"":"","使用方法#使用方法":"Markdown{{\u003c filetree/container \u003e}} {{\u003c filetree/folder name=\"content\" \u003e}} {{\u003c filetree/file name=\"_index.md\" \u003e}} {{\u003c filetree/folder name=\"docs\" state=\"closed\" \u003e}} {{\u003c filetree/file name=\"_index.md\" \u003e}} {{\u003c filetree/file name=\"introduction.md\" \u003e}} {{\u003c filetree/file name=\"introduction.fr.md\" \u003e}} {{\u003c /filetree/folder \u003e}} {{\u003c /filetree/folder \u003e}} {{\u003c filetree/file name=\"hugo.toml\" \u003e}} {{\u003c /filetree/container \u003e}}","示例#示例":"content\r_index.md\rdocs\r_index.md\rintroduction.md\rintroduction.fr.md\rhugo.toml"},"title":"文件树"},"/zh-cn/docs/guide/shortcodes/icon/":{"data":{"":"要在行内使用此短代码，需在配置中启用行内短代码功能：\nhugo.yamlenableInlineShortcodes: true\r可用图标列表可在 data/icons.yaml 中找到。","使用方法#使用方法":"{{\u003c icon \"github\" \u003e}}\r默认支持 Heroicons v1 轮廓风格图标。","如何添加自定义图标#如何添加自定义图标":"创建 data/icons.yaml 文件，按以下格式添加您的 SVG 图标：\ndata/icons.yamlyour-icon: 您的图标 SVG 内容\r随后即可通过短代码调用：\n{{\u003c icon \"your-icon\" \u003e}}\r{{\u003c card icon=\"your-icon\" \u003e}}\r提示：Iconify Design 是寻找网站 SVG 图标的优质资源平台。","示例#示例":""},"title":"图标"},"/zh-cn/docs/guide/shortcodes/jupyter/":{"data":{"":"实验性功能：通过短代码嵌入 Jupyter Notebook。注意并非所有单元格类型都受支持。\rJupyter Notebook 是 Project Jupyter 推出的语言无关的 HTML 笔记本应用。它允许你创建和分享包含动态代码、数学公式、可视化图表和叙述性文本的文档。","data-visualization#Data Visualization":"Below is an example of a simple data visualization using the Seaborn library.\n# Import seaborn import seaborn as sns # Apply the default theme sns.set_theme() # Load an example dataset tips = sns.load_dataset(\"tips\") # Create a visualization sns.relplot( data=tips, x=\"total_bill\", y=\"tip\", col=\"time\", hue=\"smoker\", style=\"smoker\", size=\"size\", )\rMatplotlib is building the font cache; this may take a moment. tips.head()\rtotal_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4","equations#Equations":"The following is an example of a simple equation using LaTeX.\n$$ E = mc^2 $$","what-is-the-jupyter-notebook#What is the Jupyter Notebook?":"The Jupyter Notebook is an interactive computing environment that enables users to author notebook documents that include:\nLive code Interactive widgets Plots Narrative text Equations Images Video These documents provide a complete and self-contained record of a computation that can be converted to various formats and shared with others using email, version control systems (like Git/GitHub) or nbviewer.jupyter.org.","使用方法#使用方法":"","使用本地笔记本#使用本地笔记本":"要使用 Jupyter Notebook 短代码，你需要在项目中放置一个 Jupyter Notebook 文件。与添加图片到项目类似，你可以将 Jupyter Notebook 放入 assets 文件夹。\nassets\rnotebook.ipynb\rcontent\rdocs\rmy-page.md\r使用 jupyter 短代码将笔记本嵌入页面：\ncontent/docs/my-page.md--- title: 我的页面 math: true --- {{% jupyter \"notebook.ipynb\" %}}\r或者，你可以利用 Hugo 的页面包功能，将 Jupyter Notebook 与 Markdown 文件组织在一起。\ncontent\rdocs\rmy-page\rindex.md\rnotebook.ipynb\rcontent/docs/my-page/index.md--- title: 我的页面 math: true --- {{% jupyter \"notebook.ipynb\" %}}","使用远程笔记本#使用远程笔记本":"你也可以通过提供笔记本文件的 URL 来使用远程笔记本。例如，要在页面中嵌入 什么是 Jupyter Notebook 笔记本，可以使用以下短代码：\n{{% jupyter \"https://raw.githubusercontent.com/jupyter/notebook/main/docs/source/examples/Notebook/What%20is%20the%20Jupyter%20Notebook.ipynb\" %}}","示例笔记本#示例笔记本":"ℹ️\r以下示例展示的是项目 assets 文件夹中包含的笔记本文件。"},"title":"Jupyter Notebook"},"/zh-cn/docs/guide/shortcodes/others/":{"data":{"":"ℹ️\r其中部分为Hugo内置短代码。 这些短代码稳定性较低，可能随时变更。","pdf#PDF":"通过PDF短代码可在内容中嵌入PDF文件。\n{{\u003c pdf \"https://example.com/sample.pdf\" \u003e}}\r也可将PDF文件置于项目目录中并使用相对路径。\n{{\u003c pdf \"path/to/file.pdf\" \u003e}}\r示例：","youtube#YouTube":"嵌入YouTube视频。\n{{\u003c youtube 视频ID \u003e}}\r效果：\n更多信息，请参阅 Hugo 的 YouTube 短代码。","徽章#徽章":"{{\u003c badge \"徽章\" \u003e}}\r效果：\n徽章\r变体：\n{{\u003c badge content=\"信息\" type=\"info\" \u003e}}\r{{\u003c badge content=\"警告\" type=\"warning\" \u003e}}\r{{\u003c badge content=\"错误\" type=\"error\" \u003e}}\r效果：\n信息\r警告\r错误\r带链接和图标：\n{{\u003c badge content=\"版本发布\" link=\"https://github.com/imfing/hextra/releases\" icon=\"github\" \u003e}}\r效果：\n版本发布"},"title":"其他"},"/zh-cn/docs/guide/shortcodes/steps/":{"data":{"":"一个内置组件，用于显示一系列步骤。","使用方法#使用方法":"ℹ️\r请注意，此短代码仅适用于Markdown内容。 如果在步骤内容中放入HTML或其他短代码，可能无法按预期渲染。\r在steps短代码内放置Markdown的三级标题。\n{{% steps %}}\r### 第一步\r这是第一步。\r### 第二步\r这是第二步。\r{{% /steps %}}","示例#示例":"","第一步#第一步":"这是第一步。","第三步#第三步":"这是第三步。","第二步#第二步":"这是第二步。"},"title":"步骤"},"/zh-cn/docs/guide/shortcodes/tabs/":{"data":{"":"","使用markdown#使用Markdown":"支持包括代码块在内的Markdown语法：\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}}\r{{\u003c tab \u003e}}\r```json\r{ \"hello\": \"world\" }\r```\r{{\u003c /tab \u003e}}\r... 其他标签页类似添加\r{{\u003c /tabs \u003e}}\rJSONYAMLTOML\r{ \"hello\": \"world\" }\rhello: world\rhello = \"world\"","使用方法#使用方法":"","同步标签页#同步标签页":"具有相同 items 列表的标签页可以同步。启用后，选择一个标签页会更新所有具有相同 items 的其他标签页，并在页面间记住选择。\n在 hugo.yaml 的 page 部分全局启用：\nhugo.yamlparams: page: tabs: sync: true\r启用后，以下两个标签页块将始终显示相同的选中项：\n{{\u003c tabs items=\"A,B\" \u003e}} {{\u003c tab \u003e}}A内容{{\u003c /tab \u003e}} {{\u003c tab \u003e}}B内容{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} {{\u003c tabs items=\"A,B\" \u003e}} {{\u003c tab \u003e}}第二个A内容{{\u003c /tab \u003e}} {{\u003c tab \u003e}}第二个B内容{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}}","指定默认选中项#指定默认选中项":"使用 defaultIndex 属性指定默认选中的标签页，索引从0开始。\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}}\r{{\u003c tab \u003e}}**JSON**: JavaScript对象表示法（JSON）是一种基于JavaScript对象语法的标准文本格式，用于表示结构化数据。{{\u003c /tab \u003e}}\r{{\u003c tab \u003e}}**YAML**: YAML是一种人类可读的数据序列化语言。{{\u003c /tab \u003e}}\r{{\u003c tab \u003e}}**TOML**: TOML旨在成为一种易于阅读的最小化配置文件格式，因其明显的语义而易于理解。{{\u003c /tab \u003e}}\r{{\u003c /tabs \u003e}}\r默认会选中 YAML 标签页。\nJSONYAMLTOML\rJSON: JavaScript对象表示法（JSON）是一种基于JavaScript对象语法的标准文本格式，用于表示结构化数据。\rYAML: YAML是一种人类可读的数据序列化语言。\rTOML: TOML旨在成为一种易于阅读的最小化配置文件格式，因其明显的语义而易于理解。","示例#示例":"macOSLinuxWindows\rmacOS: 苹果公司开发的桌面操作系统。\rLinux: 一款开源操作系统。\rWindows: 微软公司开发的桌面操作系统。","默认#默认":"{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}}\r{{\u003c tab \u003e}}**JSON**: JavaScript对象表示法（JSON）是一种基于JavaScript对象语法的标准文本格式，用于表示结构化数据。{{\u003c /tab \u003e}}\r{{\u003c tab \u003e}}**YAML**: YAML是一种人类可读的数据序列化语言。{{\u003c /tab \u003e}}\r{{\u003c tab \u003e}}**TOML**: TOML旨在成为一种易于阅读的最小化配置文件格式，因其明显的语义而易于理解。{{\u003c /tab \u003e}}\r{{\u003c /tabs \u003e}}"},"title":"标签页"},"/zh-cn/docs/guide/syntax-highlighting/":{"data":{"":"Hugo 使用纯 Go 编写的通用语法高亮工具 Chroma 来实现代码高亮。建议在 Markdown 内容中使用反引号标记代码块，例如：\nMarkdown```python def say_hello(): print(\"Hello!\") ```\r将渲染为：\ndef say_hello(): print(\"Hello!\")","功能特性#功能特性":"","复制按钮#复制按钮":"代码块默认启用复制功能，可通过站点配置文件修改其行为：\nhugo.yaml 42 43 44 45 46 47 params: highlight: copy: enable: true # hover | always display: hover","支持语言#支持语言":"完整支持的语言列表请参阅 Chroma 文档。","文件名标注#文件名标注":"通过设置 filename 属性可为代码块添加文件名或标题：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ```\rhello.pydef say_hello(): print(\"Hello!\")","文件链接#文件链接":"NEW 通过 base_url 属性可设置基础 URL，该 URL 会与文件名组合生成可点击的链接。文件名可包含相对路径以指定文件在基础路径中的位置。\nMarkdown```go {base_url=\"https://github.com/imfing/hextra/blob/main/\",filename=\"exampleSite/hugo.work\"} go 1.20 ```\rexampleSite/hugo.workgo 1.20","行号显示#行号显示":"设置 linenos=table 可启用行号，并通过 linenostart 指定起始行号：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ```\r42 43 def say_hello(): print(\"Hello!\")","行高亮#行高亮":"通过 hl_lines 属性可高亮指定行号（支持数组格式）：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ```\rhello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello()"},"title":"语法高亮"},"/zh-cn/showcase/":{"data":{"":"由 Hextra 驱动的开源网站和项目。\rBeginner Privacy\rAXIVO Docs\rStanford CS 40\rHelix Docs\rClever Cloud Documentation\rOWASP AI Security and Privacy Guide\rOsuny\rPorter\rHITSZ OpenAuto\rLutheranConfessions\rHextra Starter Template"},"title":"项目展示"}}